package mybot

import (
	"fmt"
	"github.com/robfig/cron/v3"
	"happy-birthday-bot/config"
	res "happy-birthday-bot/resources"
	"happy-birthday-bot/sheets"
	"happy-birthday-bot/usr"
	"log"
	"runtime/debug"
)

var mainChatId int64
var adminChatId int64

func StartReminderTask(bot *Bot) {
	mainChatId = config.GetInt64Property(config.MainChatIdProp)
	adminChatId = config.GetInt64Property(config.AdminChatIdProp)

	c := cron.New(cron.WithSeconds())
	_, err := c.AddFunc(config.GetStringProperty(config.ReminderTriggerCronProp), func() {
		isBirthdayComingUp(bot)
	})
	if err != nil {
		log.Panic("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ReminderTask!", err)
	}

	c.Start()
}

//---------------------------------------------------------------------------------------

func isBirthdayComingUp(bot *Bot) {
	defer handlePanic(bot)
	log.Println("Check is birthday coming up")
	users := sheets.Read()
	isUpdateNeeded := false
	for _, user := range users.AllUsers() {
		if user.DaysBeforeBirthday() == 0 && !user.BirthdayGreetings {
			handleBirthday(bot, user)
			isUpdateNeeded = true
			continue
		}
		if user.DaysBeforeBirthday() <= 14 && !user.Reminder15days {
			handle15Days(bot, user)
			isUpdateNeeded = true
			continue
		}
		if user.DaysBeforeBirthday() <= 30 && !user.Reminder30days {
			handle30Days(bot, user)
			isUpdateNeeded = true
			continue
		}
		if user.DaysBeforeBirthday() > 30 && user.BirthdayGreetings {
			//reset
			user.BirthdayGreetings = false
			user.Reminder15days = false
			user.Reminder30days = false
			isUpdateNeeded = true
		}

	}
	log.Println("isUpdateNeeded = ", isUpdateNeeded)
	if isUpdateNeeded {
		sheets.Write(&users)
	}
}

func handleBirthday(bot *Bot, user *usr.User) {
	log.Printf("handleBirthday for user %v", user.Id)
	msg := fmt.Sprintf("–£—Ä–∞! –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç `%s`! üéâ", user.Name)
	bot.SendPic(mainChatId, msg, res.HappyBirthday)
	user.BirthdayGreetings = true
	user.Reminder15days = true
	user.Reminder30days = true
}

func handle15Days(bot *Bot, user *usr.User) {
	log.Printf("handle15Days for user %v", user.Id)
	birthdayChat := getBirthdayChat(user.Id)
	msg := fmt.Sprintf("–•–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∏ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ —Ä–æ–¥–∏—Ç—Å—è `%s`!", user.Name)
	if birthdayChat != nil {
		msg += fmt.Sprintf("\n\n–ï—Å–ª–∏ —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø–æ–¥–∞—Ä–∫–∞ - —Å–∞–º–æ–µ –≤—Ä–µ–º—è: %s", birthdayChat.ChatLink)
	}
	bot.SendPic(mainChatId, msg, res.Random)

	user.Reminder15days = true
	user.Reminder30days = true
}

func handle30Days(bot *Bot, user *usr.User) {
	log.Printf("handle30Days for user %v", user.Id)
	birthdayChat := getBirthdayChat(user.Id)
	msg := fmt.Sprintf("–ü—Å—Å, —Ä–µ–±—è—Ç–∞! –£–∂–µ –º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü, `%s` –æ—Ç–º–µ—á–∞–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –æ –ø–æ–¥–∞—Ä–∫–µ!", user.Name)
	if birthdayChat != nil {
		msg += fmt.Sprintf("\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å, —á—Ç–æ –ø–æ–¥–∞—Ä–∏–º, –∑–∞–ª–µ—Ç–∞–π –≤ —á–∞—Ç: %s", birthdayChat.ChatLink)
	} else {
		msg += fmt.Sprintf("\n\n–ù–æ –∫–∞–∂–µ—Ç—Å—è @morchant –µ—â—ë –Ω–µ –∑–∞–≤–µ–ª —á–∞—Ç–∏–∫ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! –≠–π, –ø–Ω–∏—Ç–µ –µ–≥–æ –∫—Ç–æ-–Ω–∏–±—É–¥—å!")
	}
	message := bot.SendPic(mainChatId, msg, res.Random)
	bot.PinMessage(mainChatId, message.MessageID)

	user.Reminder30days = true

	sendWishlistInBirthdayChat(bot, user)
}

func sendWishlistInBirthdayChat(bot *Bot, user *usr.User) {
	defer handlePanic(bot)

	msg := fmt.Sprintf("–≠—Ç–æ —á–∞—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞. –ò–º–µ–Ω–∏–Ω–Ω–∏–∫: `%v`. –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: %v.\n\n", user.Name, user.BirthDay().ToString())
	if len(user.Wishlist) == 0 {
		msg += fmt.Sprintf("–ù–æ –ø–æ—Ö–æ–∂–µ `%s` –Ω–µ —Å–æ—Å—Ç–∞–≤–∏–ª –≤–∏—à –ª–∏—Å—Ç :(", user.Name)
	} else {
		msg += fmt.Sprintf("–í–∏—à–ª–∏—Å—Ç:\n\n```\n%s\n```", user.Wishlist)
	}

	birthdayChat := getBirthdayChat(user.Id)
	if birthdayChat != nil {
		message := bot.SendPic(birthdayChat.ChatId, msg, res.Wishlist)
		bot.PinMessage(birthdayChat.ChatId, message.MessageID)
	}
}

func getBirthdayChat(userId usr.UserId) *config.BirthdayChat {
	for _, bdChat := range config.BirthdayChats {
		if bdChat.UserId == int64(userId) {
			return &bdChat
		}
	}
	return nil
}

func handlePanic(bot *Bot) {
	if p := recover(); p != nil {
		log.Println("[PANIC] Panic was catch: ", p)
		log.Println(string(debug.Stack()))
		message := fmt.Sprintf("–ü–æ–π–º–∞–Ω–∞ –ø–∞–Ω–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è reminder task: %v", p)
		bot.SendText(adminChatId, message)
	}
}

//todo —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–Ω—É—Ç–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–æ—é –ª–∏—á–∫—É
