package handlers

import (
	"errors"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"happy-birthday-bot/date"
	"happy-birthday-bot/mybot"
	res "happy-birthday-bot/resources"
	"happy-birthday-bot/sheets"
	"happy-birthday-bot/usr"
	"log"
	"strings"
	"time"
	"unicode/utf8"
)

const Layout = "02.01.2006"

type JoinHandler struct {
}

func (h JoinHandler) Handle(bot *mybot.Bot, update tgbotapi.Update) error {
	log.Printf("handle join command")
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID
	messageID := update.Message.MessageID

	users := sheets.Read()
	if user, ok := users.Get(usr.UserId(userID)); ok {
		msg := "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üòé\n\n"
		if len(user.Wishlist) == 0 {
			msg += "–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–∏—à–ª–∏—Å—Ç? [/wishlist](/wishlist)"
		} else {
			msg += "–•–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π –≤–∏—à–ª–∏—Å—Ç? [/wishlist](/wishlist)"
		}

		bot.SendPic(chatID, msg, res.Cool)
		return nil
	}

	msg := "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ç —Ç–∞–∫:\n\n`<–¢–≤–æ–µ –∏–º—è>, <–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è>`\n\n" +
		"–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n`–í–∞—Å—è –ü—É–ø–∫–∏–Ω, 25.03`\n\n–∏–ª–∏\n\n`–í–∞—Å—è –ü—É–ø–∫–∏–Ω, 25 –º–∞—Ä—Ç–∞`"
	bot.SendPicForceReply(chatID, msg, res.Waiting, messageID)

	WaitingForReplyHandlers.Add(userID, h)
	return nil
}

func (h JoinHandler) HandleReply(bot *mybot.Bot, update tgbotapi.Update) error {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID

	users := sheets.Read()
	if _, ok := users.Get(usr.UserId(userID)); ok {
		bot.SendPic(chatID, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üòé", res.Cool)
		return nil
	}

	name, birthDay, err := parseNameAndBirthday(update.Message.Text)
	if err != nil {
		return err
	}

	user := usr.User{Id: usr.UserId(userID), Name: name}
	user.SetBirthday2(birthDay, time.Now())

	users.Add(&user)
	sheets.Write(&users)

	bot.SendPic(chatID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ç–µ–±—è –æ—Ç—Ö–µ–ø–ø–∏–±—ë–∑–¥—è—Ç! ü•≥", res.Cool)

	return nil
}

func (h JoinHandler) HandleCallback(*mybot.Bot, tgbotapi.Update, CallbackElement) error {
	return nil
}

//--------------------------------------------------------------------------------------------------

func parseNameAndBirthday(input string) (string, date.Birthday, error) {
	parts := strings.Split(input, ",")
	if len(parts) != 2 {
		return "", date.Birthday{}, errors.New("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –û—Ç–≤–µ—Ç—å –≤ –≤–∏–¥–µ\n\n`<–¢–≤–æ–µ –∏–º—è>, <–¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è>`")
	}

	name := strings.TrimSpace(parts[0])
	if name == "" {
		return "", date.Birthday{}, errors.New("–¢—ã –∑–∞–±—ã–ª –∑–∞–¥–∞—Ç—å –∏–º—è")
	}
	if utf8.RuneCountInString(name) > 10 {
		return "", date.Birthday{}, errors.New("–ù–µ –Ω–∞–≥–ª–µ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 10 —Å–∏–º–≤–æ–ª–æ–≤!")
	}

	dateStr := strings.TrimSpace(parts[1])
	if dateStr == "" {
		return "", date.Birthday{}, errors.New("–¢—ã –∑–∞–±—ã–ª –∑–∞–¥–∞—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
	}
	birthDay, err := parseDate(dateStr)
	return name, birthDay, err
}

func parseDate(input string) (date.Birthday, error) {
	birthdate, err := date.ParseBirthday(input)
	if err == nil {
		return birthdate, nil
	} else {
		dateTime, err := time.Parse(Layout, input)
		if err != nil {
			input = input + ".2000"
			dateTime, err = time.Parse(Layout, input)
			if err != nil {
				return date.Birthday{}, errors.New("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –¥–∞—Ç—É. –í–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n\n`–í–∞—Å—è –ü—É–ø–∫–∏–Ω, 25.03`\n\n–∏–ª–∏\n\n`–í–∞—Å—è –ü—É–ø–∫–∏–Ω, 25 –º–∞—Ä—Ç–∞`")
			}
		}
		return date.ToBirthday(dateTime), nil
	}
}
