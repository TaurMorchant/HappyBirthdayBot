package handlers

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"happy-birthday-bot/mybot"
	"happy-birthday-bot/resources"
	"happy-birthday-bot/sheets"
	"happy-birthday-bot/usr"
	"log"
)

type WishlistHandler struct {
}

func (h WishlistHandler) Handle(bot *mybot.Bot, update tgbotapi.Update) error {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID
	messageID := update.Message.MessageID

	users := sheets.Read()

	if user, ok := users.Get(usr.UserId(userID)); ok {
		if len(user.Wishlist) == 0 {
			msg := "–ü–æ—Ö–æ–∂–µ —Ç—ã –µ—â–µ –Ω–µ —Å–æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ–π –≤–∏—à–ª–∏—Å—Ç! –°–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å! –ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫?"
			bot.SendPicForceReply(chatID, msg, res.Wishlist, messageID)
			WaitingForReplyHandlers.Add(userID, h)
		} else {
			msg := fmt.Sprintf("–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å —Ç–∞–∫–æ–π –≤–∏—à–ª–∏—Å—Ç:\n\n```\n%s\n```\n"+
				"–•–æ—á–µ—à—å –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å?", user.Wishlist)

			inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–•–æ—á—É", okButton),
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ, –≤—Å–µ –Ω–æ—Ä–º", cancelButton),
				),
			)
			sentMessage := bot.SendPicWithKeyboard(chatID, msg, res.Wishlist, &inlineKeyboard)
			WaitingForCallbackHandlers.Add(sentMessage.MessageID, CallbackElement{UserId: userID, Handler: h})
		}
	} else {
		bot.SendPic(chatID, "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã [/join](/join)!", res.Suspicious)
	}

	return nil
}

func (h WishlistHandler) HandleReply(bot *mybot.Bot, update tgbotapi.Update) error {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID

	users := sheets.Read()
	if user, ok := users.Get(usr.UserId(userID)); ok {
		user.Wishlist = update.Message.Text
		sheets.Write(&users)

		bot.SendPic(chatID, "–í–∂—É—Ö, –≤–∏—à–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω! üëå", res.Vjuh)
	} else {
		log.Panicf("User with ID %d not found", usr.UserId(userID))
	}
	return nil
}

func (h WishlistHandler) HandleCallback(bot *mybot.Bot, update tgbotapi.Update) error {
	log.Println("Handle callback for WishlistHandler")
	chatID := update.CallbackQuery.Message.Chat.ID
	userID := update.CallbackQuery.From.ID
	messageID := update.CallbackQuery.Message.MessageID

	if update.CallbackQuery.Data == okButton {
		msg := "–ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫?"
		bot.SendPicForceReply(chatID, msg, res.Wishlist, messageID)
		WaitingForReplyHandlers.Add(userID, h)
	} else if update.CallbackQuery.Data == cancelButton {
		bot.SendPic(chatID, "–û–∫–µ—é—à–∫–∏", res.Ok)
	} else {
		bot.SendPic(chatID, "–¢—ã –æ—Ç–∫—É–¥–∞ –≤–æ–æ–±—â–µ –≤–∑—è–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É, —Ç—É—Ç –µ–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!", res.Suspicious)
	}

	return nil
}
